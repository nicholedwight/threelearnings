{
    "asset": {
        "profile": {
            "api": "WebGL",
            "version": "1.0.3"
        },
        "version": "1.0"
    },
    "extras": {
        "lights": {}
    },
    "materials": {
        "Material": {
            "technique": "MaterialTechnique",
            "values": {}
        },
        "Material.002": {
            "technique": "Material.002Technique",
            "values": {}
        }
    },
    "nodes": {
        "Teapot": {
            "children": [],
            "matrix": [1,0,0,0,0,1,0,0,0,0,1,0,0.037633,-0.09082,-0.224854,1],
            "meshes": ["Mesh"],
            "name": "Teapot"
        }
    },
    "programs": {
        "Material.002Program": {
            "attributes": ["bl_Vertex","bl_Normal"],
            "fragmentShader": "Material.002FS",
            "vertexShader": "Material.002VS"
        },
        "MaterialProgram": {
            "attributes": ["bl_Vertex","bl_Normal"],
            "fragmentShader": "MaterialFS",
            "vertexShader": "MaterialVS"
        }
    },
    "samplers": {
        "default": {}
    },
    "scene": "Scene",
    "scenes": {
        "Scene": {
            "extras": {
                "active_camera": "",
                "background_color": [0.050876,0.050876,0.050876],
                "frames_per_second": 24
            },
            "nodes": ["Teapot"]
        }
    },
    "shaders": {
        "Material.002FS": {
            "type": 35632,
            "uri": "data:text/plain;base64,"
        },
        "Material.002VS": {
            "type": 35633,
            "uri": "data:text/plain;base64,I3ZlcnNpb24gMTAwCgpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwoKYXR0cmlidXRlIHZlYzQgYmxfVmVydGV4OwphdHRyaWJ1dGUgdmVjMyBibF9Ob3JtYWw7CnVuaWZvcm0gbWF0NCBibF9Nb2RlbFZpZXdNYXRyaXg7CnVuaWZvcm0gbWF0NCBibF9Qcm9qZWN0aW9uTWF0cml4Owp1bmlmb3JtIG1hdDMgYmxfTm9ybWFsTWF0cml4OwoKDQoNCnZhcnlpbmcgdmVjMyB2YXJwb3NpdGlvbjsNCnZhcnlpbmcgdmVjMyB2YXJub3JtYWw7DQoNCg0KDQoNCi8qIENvbG9yLCBrZWVwIGF0dHJpYnV0ZSBzeW5jIHdpdGg6IGdwdV9zaGFkZXJfdmVydGV4X3dvcmxkLmdsc2wgKi8NCg0KZmxvYXQgc3JnYl90b19saW5lYXJyZ2IoZmxvYXQgYykNCnsNCglpZiAoYyA8IDAuMDQwNDUpDQoJCXJldHVybiAoYyA8IDAuMCkgPyAwLjAgOiBjICogKDEuMCAvIDEyLjkyKTsNCgllbHNlDQoJCXJldHVybiBwb3coKGMgKyAwLjA1NSkgKiAoMS4wIC8gMS4wNTUpLCAyLjQpOw0KfQ0KDQp2b2lkIHNyZ2JfdG9fbGluZWFycmdiKHZlYzMgY29sX2Zyb20sIHZhcnlpbmcgdmVjMyBjb2xfdG8pDQp7DQoJY29sX3RvLnIgPSBzcmdiX3RvX2xpbmVhcnJnYihjb2xfZnJvbS5yKTsNCgljb2xfdG8uZyA9IHNyZ2JfdG9fbGluZWFycmdiKGNvbF9mcm9tLmcpOw0KCWNvbF90by5iID0gc3JnYl90b19saW5lYXJyZ2IoY29sX2Zyb20uYik7DQp9DQoNCnZvaWQgc3JnYl90b19saW5lYXJyZ2IodmVjNCBjb2xfZnJvbSwgdmFyeWluZyB2ZWM0IGNvbF90bykNCnsNCgljb2xfdG8uciA9IHNyZ2JfdG9fbGluZWFycmdiKGNvbF9mcm9tLnIpOw0KCWNvbF90by5nID0gc3JnYl90b19saW5lYXJyZ2IoY29sX2Zyb20uZyk7DQoJY29sX3RvLmIgPSBzcmdiX3RvX2xpbmVhcnJnYihjb2xfZnJvbS5iKTsNCgljb2xfdG8uYSA9IGNvbF9mcm9tLmE7DQp9DQoNCmJvb2wgaXNfc3JnYihpbnQgaW5mbykNCnsNCiNpZmRlZiBVU0VfTkVXX1NIQURJTkcNCglyZXR1cm4gKGluZm8gPT0gMSk/IHRydWU6IGZhbHNlOw0KI2Vsc2UNCglyZXR1cm4gZmFsc2U7DQojZW5kaWYNCn0NCg0Kdm9pZCBzZXRfdmFyX2Zyb21fYXR0cihmbG9hdCBhdHRyLCBpbnQgaW5mbywgdmFyeWluZyBmbG9hdCB2YXIpDQp7DQoJdmFyID0gYXR0cjsNCn0NCg0Kdm9pZCBzZXRfdmFyX2Zyb21fYXR0cih2ZWMyIGF0dHIsIGludCBpbmZvLCB2YXJ5aW5nIHZlYzIgdmFyKQ0Kew0KCXZhciA9IGF0dHI7DQp9DQoNCnZvaWQgc2V0X3Zhcl9mcm9tX2F0dHIodmVjMyBhdHRyLCBpbnQgaW5mbywgdmFyeWluZyB2ZWMzIHZhcikNCnsNCglpZiAoaXNfc3JnYihpbmZvKSkgew0KCQlzcmdiX3RvX2xpbmVhcnJnYihhdHRyLCB2YXIpOw0KCX0NCgllbHNlIHsNCgkJdmFyID0gYXR0cjsNCgl9DQp9DQoNCnZvaWQgc2V0X3Zhcl9mcm9tX2F0dHIodmVjNCBhdHRyLCBpbnQgaW5mbywgdmFyeWluZyB2ZWM0IHZhcikNCnsNCglpZiAoaXNfc3JnYihpbmZvKSkgew0KCQlzcmdiX3RvX2xpbmVhcnJnYihhdHRyLCB2YXIpOw0KCX0NCgllbHNlIHsNCgkJdmFyID0gYXR0cjsNCgl9DQp9DQoNCi8qIGVuZCBjb2xvciBjb2RlICovDQoNCg0Kdm9pZCBtYWluKCkNCnsNCg0KCXZlYzQgcG9zaXRpb24gPSBibF9WZXJ0ZXg7DQoJdmVjMyBub3JtYWwgPSBibF9Ob3JtYWw7DQoNCg0KCXZlYzQgY28gPSBibF9Nb2RlbFZpZXdNYXRyaXggKiBwb3NpdGlvbjsNCg0KCXZhcnBvc2l0aW9uID0gY28ueHl6Ow0KCXZhcm5vcm1hbCA9IG5vcm1hbGl6ZShibF9Ob3JtYWxNYXRyaXggKiBub3JtYWwpOw0KCWdsX1Bvc2l0aW9uID0gYmxfUHJvamVjdGlvbk1hdHJpeCAqIGNvOw0KDQogDQoNCg0KfQo="
        },
        "MaterialFS": {
            "type": 35632,
            "uri": "data:text/plain;base64,"
        },
        "MaterialVS": {
            "type": 35633,
            "uri": "data:text/plain;base64,I3ZlcnNpb24gMTAwCgpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwoKYXR0cmlidXRlIHZlYzQgYmxfVmVydGV4OwphdHRyaWJ1dGUgdmVjMyBibF9Ob3JtYWw7CnVuaWZvcm0gbWF0NCBibF9Nb2RlbFZpZXdNYXRyaXg7CnVuaWZvcm0gbWF0NCBibF9Qcm9qZWN0aW9uTWF0cml4Owp1bmlmb3JtIG1hdDMgYmxfTm9ybWFsTWF0cml4OwoKDQoNCnZhcnlpbmcgdmVjMyB2YXJwb3NpdGlvbjsNCnZhcnlpbmcgdmVjMyB2YXJub3JtYWw7DQoNCg0KDQoNCi8qIENvbG9yLCBrZWVwIGF0dHJpYnV0ZSBzeW5jIHdpdGg6IGdwdV9zaGFkZXJfdmVydGV4X3dvcmxkLmdsc2wgKi8NCg0KZmxvYXQgc3JnYl90b19saW5lYXJyZ2IoZmxvYXQgYykNCnsNCglpZiAoYyA8IDAuMDQwNDUpDQoJCXJldHVybiAoYyA8IDAuMCkgPyAwLjAgOiBjICogKDEuMCAvIDEyLjkyKTsNCgllbHNlDQoJCXJldHVybiBwb3coKGMgKyAwLjA1NSkgKiAoMS4wIC8gMS4wNTUpLCAyLjQpOw0KfQ0KDQp2b2lkIHNyZ2JfdG9fbGluZWFycmdiKHZlYzMgY29sX2Zyb20sIHZhcnlpbmcgdmVjMyBjb2xfdG8pDQp7DQoJY29sX3RvLnIgPSBzcmdiX3RvX2xpbmVhcnJnYihjb2xfZnJvbS5yKTsNCgljb2xfdG8uZyA9IHNyZ2JfdG9fbGluZWFycmdiKGNvbF9mcm9tLmcpOw0KCWNvbF90by5iID0gc3JnYl90b19saW5lYXJyZ2IoY29sX2Zyb20uYik7DQp9DQoNCnZvaWQgc3JnYl90b19saW5lYXJyZ2IodmVjNCBjb2xfZnJvbSwgdmFyeWluZyB2ZWM0IGNvbF90bykNCnsNCgljb2xfdG8uciA9IHNyZ2JfdG9fbGluZWFycmdiKGNvbF9mcm9tLnIpOw0KCWNvbF90by5nID0gc3JnYl90b19saW5lYXJyZ2IoY29sX2Zyb20uZyk7DQoJY29sX3RvLmIgPSBzcmdiX3RvX2xpbmVhcnJnYihjb2xfZnJvbS5iKTsNCgljb2xfdG8uYSA9IGNvbF9mcm9tLmE7DQp9DQoNCmJvb2wgaXNfc3JnYihpbnQgaW5mbykNCnsNCiNpZmRlZiBVU0VfTkVXX1NIQURJTkcNCglyZXR1cm4gKGluZm8gPT0gMSk/IHRydWU6IGZhbHNlOw0KI2Vsc2UNCglyZXR1cm4gZmFsc2U7DQojZW5kaWYNCn0NCg0Kdm9pZCBzZXRfdmFyX2Zyb21fYXR0cihmbG9hdCBhdHRyLCBpbnQgaW5mbywgdmFyeWluZyBmbG9hdCB2YXIpDQp7DQoJdmFyID0gYXR0cjsNCn0NCg0Kdm9pZCBzZXRfdmFyX2Zyb21fYXR0cih2ZWMyIGF0dHIsIGludCBpbmZvLCB2YXJ5aW5nIHZlYzIgdmFyKQ0Kew0KCXZhciA9IGF0dHI7DQp9DQoNCnZvaWQgc2V0X3Zhcl9mcm9tX2F0dHIodmVjMyBhdHRyLCBpbnQgaW5mbywgdmFyeWluZyB2ZWMzIHZhcikNCnsNCglpZiAoaXNfc3JnYihpbmZvKSkgew0KCQlzcmdiX3RvX2xpbmVhcnJnYihhdHRyLCB2YXIpOw0KCX0NCgllbHNlIHsNCgkJdmFyID0gYXR0cjsNCgl9DQp9DQoNCnZvaWQgc2V0X3Zhcl9mcm9tX2F0dHIodmVjNCBhdHRyLCBpbnQgaW5mbywgdmFyeWluZyB2ZWM0IHZhcikNCnsNCglpZiAoaXNfc3JnYihpbmZvKSkgew0KCQlzcmdiX3RvX2xpbmVhcnJnYihhdHRyLCB2YXIpOw0KCX0NCgllbHNlIHsNCgkJdmFyID0gYXR0cjsNCgl9DQp9DQoNCi8qIGVuZCBjb2xvciBjb2RlICovDQoNCg0Kdm9pZCBtYWluKCkNCnsNCg0KCXZlYzQgcG9zaXRpb24gPSBibF9WZXJ0ZXg7DQoJdmVjMyBub3JtYWwgPSBibF9Ob3JtYWw7DQoNCg0KCXZlYzQgY28gPSBibF9Nb2RlbFZpZXdNYXRyaXggKiBwb3NpdGlvbjsNCg0KCXZhcnBvc2l0aW9uID0gY28ueHl6Ow0KCXZhcm5vcm1hbCA9IG5vcm1hbGl6ZShibF9Ob3JtYWxNYXRyaXggKiBub3JtYWwpOw0KCWdsX1Bvc2l0aW9uID0gYmxfUHJvamVjdGlvbk1hdHJpeCAqIGNvOw0KDQogDQoNCg0KfQo="
        }
    },
    "techniques": {
        "Material.002Technique": {
            "attributes": {
                "bl_Normal": "bl_Normal",
                "bl_Vertex": "bl_Vertex"
            },
            "parameters": {
                "bl_ModelViewMatrix": {
                    "semantic": "MODELVIEW",
                    "type": 35676
                },
                "bl_Normal": {
                    "semantic": "NORMAL",
                    "type": 35665
                },
                "bl_NormalMatrix": {
                    "semantic": "MODELVIEWINVERSETRANSPOSE",
                    "type": 35675
                },
                "bl_ProjectionMatrix": {
                    "semantic": "PROJECTION",
                    "type": 35676
                },
                "bl_Vertex": {
                    "semantic": "POSITION",
                    "type": 35666
                }
            },
            "program": "Material.002Program",
            "uniforms": {
                "bl_ModelViewMatrix": "bl_ModelViewMatrix",
                "bl_NormalMatrix": "bl_NormalMatrix",
                "bl_ProjectionMatrix": "bl_ProjectionMatrix"
            }
        },
        "MaterialTechnique": {
            "attributes": {
                "bl_Normal": "bl_Normal",
                "bl_Vertex": "bl_Vertex"
            },
            "parameters": {
                "bl_ModelViewMatrix": {
                    "semantic": "MODELVIEW",
                    "type": 35676
                },
                "bl_Normal": {
                    "semantic": "NORMAL",
                    "type": 35665
                },
                "bl_NormalMatrix": {
                    "semantic": "MODELVIEWINVERSETRANSPOSE",
                    "type": 35675
                },
                "bl_ProjectionMatrix": {
                    "semantic": "PROJECTION",
                    "type": 35676
                },
                "bl_Vertex": {
                    "semantic": "POSITION",
                    "type": 35666
                }
            },
            "program": "MaterialProgram",
            "uniforms": {
                "bl_ModelViewMatrix": "bl_ModelViewMatrix",
                "bl_NormalMatrix": "bl_NormalMatrix",
                "bl_ProjectionMatrix": "bl_ProjectionMatrix"
            }
        }
    }
}
